{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _Promise from \"@babel/runtime-corejs2/core-js/promise\";\nimport _slicedToArray from \"@babel/runtime-corejs2/helpers/esm/slicedToArray\";\nimport _asyncToGenerator from \"@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport \"isomorphic-fetch\";\nimport Error from \"./_error\";\nimport { Layout } from \"../components/Layout\";\nimport { ChannelHeader } from \"../components/ChannelHeader\";\nimport { ChannelGrid } from \"../components/ChannelGrid\";\nimport { LastPodcasts } from \"../components/LastPodcasts\";\n\nvar Channel = function Channel(_ref) {\n  var channel = _ref.channel,\n      audioClips = _ref.audioClips,\n      series = _ref.series,\n      statusCode = _ref.statusCode;\n  var channels = series;\n\n  if (statusCode !== 200) {\n    return __jsx(Error, {\n      statusCode: statusCode,\n      message: \"Ha ocurrido un error.\"\n    });\n  }\n\n  return __jsx(Layout, {\n    title: \"Podcasts - Channel\"\n  }, __jsx(ChannelHeader, {\n    channel: channel\n  }), __jsx(ChannelGrid, {\n    channels: channels\n  }), __jsx(LastPodcasts, {\n    audioClips: audioClips\n  }));\n};\n\nChannel.getInitialProps =\n/*#__PURE__*/\nfunction () {\n  var _ref3 = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee(_ref2) {\n    var query, res, idChannel, _ref4, _ref5, reqChannel, reqAudio, reqSeries, dataChannel, channel, dataAudio, audioClips, dataSeries, series;\n\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            query = _ref2.query, res = _ref2.res;\n            _context.prev = 1;\n            idChannel = query.id;\n            _context.next = 5;\n            return _Promise.all([fetch(\"https://api.audioboom.com/channels/\".concat(idChannel)), fetch(\"https://api.audioboom.com/channels/\".concat(idChannel, \"/audio_clips\")), fetch(\"https://api.audioboom.com/channels/\".concat(idChannel, \"/child_channels\"))]);\n\n          case 5:\n            _ref4 = _context.sent;\n            _ref5 = _slicedToArray(_ref4, 3);\n            reqChannel = _ref5[0];\n            reqAudio = _ref5[1];\n            reqSeries = _ref5[2];\n\n            if (!(reqChannel.status >= 404)) {\n              _context.next = 13;\n              break;\n            }\n\n            res.statusCode = reqChannel.status;\n            return _context.abrupt(\"return\", {\n              channel: null,\n              audioClips: null,\n              series: null,\n              statusCode: reqChannel.status\n            });\n\n          case 13:\n            _context.next = 15;\n            return reqChannel.json();\n\n          case 15:\n            dataChannel = _context.sent;\n            channel = dataChannel.body.channel;\n            _context.next = 19;\n            return reqAudio.json();\n\n          case 19:\n            dataAudio = _context.sent;\n            audioClips = dataAudio.body.audio_clips;\n            _context.next = 23;\n            return reqSeries.json();\n\n          case 23:\n            dataSeries = _context.sent;\n            series = dataSeries.body.channels;\n            return _context.abrupt(\"return\", {\n              channel: channel,\n              audioClips: audioClips,\n              series: series,\n              statusCode: 200\n            });\n\n          case 28:\n            _context.prev = 28;\n            _context.t0 = _context[\"catch\"](1);\n            return _context.abrupt(\"return\", {\n              channel: null,\n              audioClips: null,\n              series: null,\n              statusCode: 503\n            });\n\n          case 31:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee, null, [[1, 28]]);\n  }));\n\n  return function (_x) {\n    return _ref3.apply(this, arguments);\n  };\n}();\n\nexport default Channel;","map":{"version":3,"sources":["/home/anthony/cursos_platzi/next.js/podcast/pages/channel.js"],"names":["Error","Layout","ChannelHeader","ChannelGrid","LastPodcasts","Channel","channel","audioClips","series","statusCode","channels","getInitialProps","query","res","idChannel","id","all","fetch","reqChannel","reqAudio","reqSeries","status","json","dataChannel","body","dataAudio","audio_clips","dataSeries"],"mappings":";;;;;;AAAA,OAAO,kBAAP;AACA,OAAOA,KAAP,MAAkB,UAAlB;AACA,SAASC,MAAT,QAAuB,sBAAvB;AACA,SAASC,aAAT,QAA8B,6BAA9B;AACA,SAASC,WAAT,QAA4B,2BAA5B;AACA,SAASC,YAAT,QAA6B,4BAA7B;;AAEA,IAAMC,OAAO,GAAG,SAAVA,OAAU,OAAiD;AAAA,MAA9CC,OAA8C,QAA9CA,OAA8C;AAAA,MAArCC,UAAqC,QAArCA,UAAqC;AAAA,MAAzBC,MAAyB,QAAzBA,MAAyB;AAAA,MAAjBC,UAAiB,QAAjBA,UAAiB;AAC/D,MAAMC,QAAQ,GAAGF,MAAjB;;AAEA,MAAIC,UAAU,KAAK,GAAnB,EAAwB;AACtB,WAAO,MAAC,KAAD;AAAO,MAAA,UAAU,EAAEA,UAAnB;AAA+B,MAAA,OAAO,EAAC;AAAvC,MAAP;AACD;;AAGD,SAEE,MAAC,MAAD;AAAQ,IAAA,KAAK,EAAC;AAAd,KACE,MAAC,aAAD;AAAe,IAAA,OAAO,EAAEH;AAAxB,IADF,EAEE,MAAC,WAAD;AAAa,IAAA,QAAQ,EAAEI;AAAvB,IAFF,EAGE,MAAC,YAAD;AAAc,IAAA,UAAU,EAAEH;AAA1B,IAHF,CAFF;AAWD,CAnBD;;AAqBAF,OAAO,CAACM,eAAR;AAAA;AAAA;AAAA;AAAA;AAAA,2BAA0B;AAAA;;AAAA;AAAA;AAAA;AAAA;AAASC,YAAAA,KAAT,SAASA,KAAT,EAAgBC,GAAhB,SAAgBA,GAAhB;AAAA;AAGlBC,YAAAA,SAHkB,GAGNF,KAAK,CAACG,EAHA;AAAA;AAAA,mBAIwB,SAAQC,GAAR,CAAY,CACxDC,KAAK,8CAAuCH,SAAvC,EADmD,EAExDG,KAAK,8CAAuCH,SAAvC,kBAFmD,EAGxDG,KAAK,8CAAuCH,SAAvC,qBAHmD,CAAZ,CAJxB;;AAAA;AAAA;AAAA;AAIjBI,YAAAA,UAJiB;AAILC,YAAAA,QAJK;AAIKC,YAAAA,SAJL;;AAAA,kBAUlBF,UAAU,CAACG,MAAX,IAAqB,GAVH;AAAA;AAAA;AAAA;;AAWpBR,YAAAA,GAAG,CAACJ,UAAJ,GAAiBS,UAAU,CAACG,MAA5B;AAXoB,6CAYb;AAAEf,cAAAA,OAAO,EAAE,IAAX;AAAiBC,cAAAA,UAAU,EAAE,IAA7B;AAAmCC,cAAAA,MAAM,EAAE,IAA3C;AAAiDC,cAAAA,UAAU,EAAES,UAAU,CAACG;AAAxE,aAZa;;AAAA;AAAA;AAAA,mBAeEH,UAAU,CAACI,IAAX,EAfF;;AAAA;AAelBC,YAAAA,WAfkB;AAgBlBjB,YAAAA,OAhBkB,GAgBRiB,WAAW,CAACC,IAAZ,CAAiBlB,OAhBT;AAAA;AAAA,mBAiBAa,QAAQ,CAACG,IAAT,EAjBA;;AAAA;AAiBlBG,YAAAA,SAjBkB;AAkBlBlB,YAAAA,UAlBkB,GAkBLkB,SAAS,CAACD,IAAV,CAAeE,WAlBV;AAAA;AAAA,mBAmBCN,SAAS,CAACE,IAAV,EAnBD;;AAAA;AAmBlBK,YAAAA,UAnBkB;AAoBlBnB,YAAAA,MApBkB,GAoBTmB,UAAU,CAACH,IAAX,CAAgBd,QApBP;AAAA,6CAqBf;AAAEJ,cAAAA,OAAO,EAAPA,OAAF;AAAWC,cAAAA,UAAU,EAAVA,UAAX;AAAuBC,cAAAA,MAAM,EAANA,MAAvB;AAA+BC,cAAAA,UAAU,EAAE;AAA3C,aArBe;;AAAA;AAAA;AAAA;AAAA,6CAuBf;AAAEH,cAAAA,OAAO,EAAE,IAAX;AAAiBC,cAAAA,UAAU,EAAE,IAA7B;AAAmCC,cAAAA,MAAM,EAAE,IAA3C;AAAiDC,cAAAA,UAAU,EAAE;AAA7D,aAvBe;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAA1B;;AAAA;AAAA;AAAA;AAAA;;AA8BA,eAAeJ,OAAf","sourcesContent":["import \"isomorphic-fetch\";\nimport Error from \"./_error\"\nimport { Layout } from \"../components/Layout\"\nimport { ChannelHeader } from \"../components/ChannelHeader\"\nimport { ChannelGrid } from \"../components/ChannelGrid\"\nimport { LastPodcasts } from \"../components/LastPodcasts\"\n\nconst Channel = ({ channel, audioClips, series, statusCode }) => {\n  const channels = series;\n\n  if (statusCode !== 200) {\n    return <Error statusCode={statusCode} message=\"Ha ocurrido un error.\"></Error>\n  }\n\n\n  return (\n\n    <Layout title=\"Podcasts - Channel\">\n      <ChannelHeader channel={channel}></ChannelHeader>\n      <ChannelGrid channels={channels}></ChannelGrid>\n      <LastPodcasts audioClips={audioClips}></LastPodcasts>\n    </Layout>\n\n\n\n  )\n}\n\nChannel.getInitialProps = async ({ query, res }) => {\n\n  try {\n    let idChannel = query.id;\n    let [reqChannel, reqAudio, reqSeries] = await Promise.all([\n      fetch(`https://api.audioboom.com/channels/${idChannel}`),\n      fetch(`https://api.audioboom.com/channels/${idChannel}/audio_clips`),\n      fetch(`https://api.audioboom.com/channels/${idChannel}/child_channels`)\n    ])\n\n    if (reqChannel.status >= 404) {\n      res.statusCode = reqChannel.status;\n      return { channel: null, audioClips: null, series: null, statusCode: reqChannel.status }\n    }\n\n    let dataChannel = await reqChannel.json();\n    let channel = dataChannel.body.channel;\n    let dataAudio = await reqAudio.json();\n    let audioClips = dataAudio.body.audio_clips;\n    let dataSeries = await reqSeries.json();\n    let series = dataSeries.body.channels;\n    return { channel, audioClips, series, statusCode: 200 };\n  } catch (error) {\n    return { channel: null, audioClips: null, series: null, statusCode: 503 }\n  }\n\n\n\n}\n\nexport default Channel"]},"metadata":{},"sourceType":"module"}