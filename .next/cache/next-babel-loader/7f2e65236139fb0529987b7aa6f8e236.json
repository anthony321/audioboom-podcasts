{"ast":null,"code":"import _Promise from \"@babel/runtime-corejs2/core-js/promise\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport \"isomorphic-fetch\";\nimport Error from \"./_error\";\nimport { Layout } from \"../components/Layout\";\nimport { ChannelHeader } from \"../components/ChannelHeader\";\nimport { ChannelGrid } from \"../components/ChannelGrid\";\nimport { LastPodcasts } from \"../components/LastPodcasts\";\n\nconst Channel = ({\n  channel,\n  audioClips,\n  series,\n  statusCode\n}) => {\n  const channels = series;\n\n  if (statusCode !== 200) {\n    return __jsx(Error, {\n      statusCode: statusCode,\n      message: \"Ha ocurrido un error.\"\n    });\n  }\n\n  return __jsx(Layout, {\n    title: \"Podcasts - Channel\"\n  }, __jsx(ChannelHeader, {\n    channel: channel\n  }), __jsx(ChannelGrid, {\n    channels: channels\n  }), __jsx(LastPodcasts, {\n    audioClips: audioClips\n  }));\n};\n\nChannel.getInitialProps = async ({\n  query,\n  res\n}) => {\n  try {\n    let idChannel = query.id;\n    let [reqChannel, reqAudio, reqSeries] = await _Promise.all([fetch(`https://api.audioboom.com/channels/${idChannel}`), fetch(`https://api.audioboom.com/channels/${idChannel}/audio_clips`), fetch(`https://api.audioboom.com/channels/${idChannel}/child_channels`)]);\n\n    if (reqChannel.status >= 404) {\n      res.statusCode = reqChannel.status;\n      return {\n        channel: null,\n        audioClips: null,\n        series: null,\n        statusCode: reqChannel.status\n      };\n    }\n\n    let dataChannel = await reqChannel.json();\n    let channel = dataChannel.body.channel;\n    let dataAudio = await reqAudio.json();\n    let audioClips = dataAudio.body.audio_clips;\n    let dataSeries = await reqSeries.json();\n    let series = dataSeries.body.channels;\n    return {\n      channel,\n      audioClips,\n      series,\n      statusCode: 200\n    };\n  } catch (error) {\n    return {\n      channel: null,\n      audioClips: null,\n      series: null,\n      statusCode: 503\n    };\n  }\n};\n\nexport default Channel;","map":{"version":3,"sources":["/home/anthony/cursos_platzi/next.js/podcast/pages/channel.js"],"names":["Error","Layout","ChannelHeader","ChannelGrid","LastPodcasts","Channel","channel","audioClips","series","statusCode","channels","getInitialProps","query","res","idChannel","id","reqChannel","reqAudio","reqSeries","all","fetch","status","dataChannel","json","body","dataAudio","audio_clips","dataSeries","error"],"mappings":";;;AAAA,OAAO,kBAAP;AACA,OAAOA,KAAP,MAAkB,UAAlB;AACA,SAASC,MAAT,QAAuB,sBAAvB;AACA,SAASC,aAAT,QAA8B,6BAA9B;AACA,SAASC,WAAT,QAA4B,2BAA5B;AACA,SAASC,YAAT,QAA6B,4BAA7B;;AAEA,MAAMC,OAAO,GAAG,CAAC;AAAEC,EAAAA,OAAF;AAAWC,EAAAA,UAAX;AAAuBC,EAAAA,MAAvB;AAA+BC,EAAAA;AAA/B,CAAD,KAAiD;AAC/D,QAAMC,QAAQ,GAAGF,MAAjB;;AAEA,MAAIC,UAAU,KAAK,GAAnB,EAAwB;AACtB,WAAO,MAAC,KAAD;AAAO,MAAA,UAAU,EAAEA,UAAnB;AAA+B,MAAA,OAAO,EAAC;AAAvC,MAAP;AACD;;AAGD,SAEE,MAAC,MAAD;AAAQ,IAAA,KAAK,EAAC;AAAd,KACE,MAAC,aAAD;AAAe,IAAA,OAAO,EAAEH;AAAxB,IADF,EAEE,MAAC,WAAD;AAAa,IAAA,QAAQ,EAAEI;AAAvB,IAFF,EAGE,MAAC,YAAD;AAAc,IAAA,UAAU,EAAEH;AAA1B,IAHF,CAFF;AAWD,CAnBD;;AAqBAF,OAAO,CAACM,eAAR,GAA0B,OAAO;AAAEC,EAAAA,KAAF;AAASC,EAAAA;AAAT,CAAP,KAA0B;AAElD,MAAI;AACF,QAAIC,SAAS,GAAGF,KAAK,CAACG,EAAtB;AACA,QAAI,CAACC,UAAD,EAAaC,QAAb,EAAuBC,SAAvB,IAAoC,MAAM,SAAQC,GAAR,CAAY,CACxDC,KAAK,CAAE,sCAAqCN,SAAU,EAAjD,CADmD,EAExDM,KAAK,CAAE,sCAAqCN,SAAU,cAAjD,CAFmD,EAGxDM,KAAK,CAAE,sCAAqCN,SAAU,iBAAjD,CAHmD,CAAZ,CAA9C;;AAMA,QAAIE,UAAU,CAACK,MAAX,IAAqB,GAAzB,EAA8B;AAC5BR,MAAAA,GAAG,CAACJ,UAAJ,GAAiBO,UAAU,CAACK,MAA5B;AACA,aAAO;AAAEf,QAAAA,OAAO,EAAE,IAAX;AAAiBC,QAAAA,UAAU,EAAE,IAA7B;AAAmCC,QAAAA,MAAM,EAAE,IAA3C;AAAiDC,QAAAA,UAAU,EAAEO,UAAU,CAACK;AAAxE,OAAP;AACD;;AAED,QAAIC,WAAW,GAAG,MAAMN,UAAU,CAACO,IAAX,EAAxB;AACA,QAAIjB,OAAO,GAAGgB,WAAW,CAACE,IAAZ,CAAiBlB,OAA/B;AACA,QAAImB,SAAS,GAAG,MAAMR,QAAQ,CAACM,IAAT,EAAtB;AACA,QAAIhB,UAAU,GAAGkB,SAAS,CAACD,IAAV,CAAeE,WAAhC;AACA,QAAIC,UAAU,GAAG,MAAMT,SAAS,CAACK,IAAV,EAAvB;AACA,QAAIf,MAAM,GAAGmB,UAAU,CAACH,IAAX,CAAgBd,QAA7B;AACA,WAAO;AAAEJ,MAAAA,OAAF;AAAWC,MAAAA,UAAX;AAAuBC,MAAAA,MAAvB;AAA+BC,MAAAA,UAAU,EAAE;AAA3C,KAAP;AACD,GApBD,CAoBE,OAAOmB,KAAP,EAAc;AACd,WAAO;AAAEtB,MAAAA,OAAO,EAAE,IAAX;AAAiBC,MAAAA,UAAU,EAAE,IAA7B;AAAmCC,MAAAA,MAAM,EAAE,IAA3C;AAAiDC,MAAAA,UAAU,EAAE;AAA7D,KAAP;AACD;AAIF,CA5BD;;AA8BA,eAAeJ,OAAf","sourcesContent":["import \"isomorphic-fetch\";\nimport Error from \"./_error\"\nimport { Layout } from \"../components/Layout\"\nimport { ChannelHeader } from \"../components/ChannelHeader\"\nimport { ChannelGrid } from \"../components/ChannelGrid\"\nimport { LastPodcasts } from \"../components/LastPodcasts\"\n\nconst Channel = ({ channel, audioClips, series, statusCode }) => {\n  const channels = series;\n\n  if (statusCode !== 200) {\n    return <Error statusCode={statusCode} message=\"Ha ocurrido un error.\"></Error>\n  }\n\n\n  return (\n\n    <Layout title=\"Podcasts - Channel\">\n      <ChannelHeader channel={channel}></ChannelHeader>\n      <ChannelGrid channels={channels}></ChannelGrid>\n      <LastPodcasts audioClips={audioClips}></LastPodcasts>\n    </Layout>\n\n\n\n  )\n}\n\nChannel.getInitialProps = async ({ query, res }) => {\n\n  try {\n    let idChannel = query.id;\n    let [reqChannel, reqAudio, reqSeries] = await Promise.all([\n      fetch(`https://api.audioboom.com/channels/${idChannel}`),\n      fetch(`https://api.audioboom.com/channels/${idChannel}/audio_clips`),\n      fetch(`https://api.audioboom.com/channels/${idChannel}/child_channels`)\n    ])\n\n    if (reqChannel.status >= 404) {\n      res.statusCode = reqChannel.status;\n      return { channel: null, audioClips: null, series: null, statusCode: reqChannel.status }\n    }\n\n    let dataChannel = await reqChannel.json();\n    let channel = dataChannel.body.channel;\n    let dataAudio = await reqAudio.json();\n    let audioClips = dataAudio.body.audio_clips;\n    let dataSeries = await reqSeries.json();\n    let series = dataSeries.body.channels;\n    return { channel, audioClips, series, statusCode: 200 };\n  } catch (error) {\n    return { channel: null, audioClips: null, series: null, statusCode: 503 }\n  }\n\n\n\n}\n\nexport default Channel"]},"metadata":{},"sourceType":"module"}